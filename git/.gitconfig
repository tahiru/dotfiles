# Aliases for git commands
[alias]
    # Staging
    a = add
    aa = add --all

    # Branching
    br = branch
    branch-name = rev-parse --abbrev-ref HEAD
    branch-diff = diff master...HEAD
    branch-files = "!git diff master...HEAD --name-status | sed '/^.\\s\\+//'"

    # Committing
    c = commit
    ca = commit -a
    cm = commit -m
    cal = !git add -A && git commit # Commit all changes
    cam = commit -am
    cne = commit --no-edit
    amend = commit --amend
    amend-all = !git add --all && git commit --amend --reuse-message=HEAD

    # Cloning
    cl = clone
    sclone = clone --depth=1

    # Checking out
    co = checkout
    cb = checkout -b

    # Cherry picking
    cp = cherry-pick

    # Diffing
    d = diff --color-words
    dc = diff --cached
    df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Merging
    m = merge

    # Pulling
    up = pull
    plom = pull origin master
    plum = pull upstream master
    preb = !git fetch upstream && git rebase upstream/master

    # Pushing
    p = push
    pom = push origin master
    poh = push origin head

    # Stashing
    st = stash
    stp = stash pop

    # Status/Logging
    s = status
    ss = status -sb
    hist = log --graph --pretty=custom
    l = log --pretty=custom
    ll = log --stat --abbrev-commit
    lc = shortlog --summary --numbered

    # Resetting
    unstage = reset HEAD --
    undo = reset --soft HEAD~1
    reset = reset --hard HEAD~1

    # Remote
    r = remote -v

    # Submodules
    subpl = submodule update --init --recursive

    # Miscellaneous
    publish = "!git push --set-upstream origin $(git branch-name)"

# Find commits by source code
cc = "!f() { \
    git log --pretty=custom --decorate --date-short --grep=\"$1\"; \
}; f"

# Credit an author on the latest commit
credit = "!f() { \
    if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
        git commit --amend --author \"$1 <$2>\" -C HEAD; \
}; f"

# List remote branches
lrb = "!f() { \
    remote="${1:-origin}"; \
    git ls-remote --heads "$remote"; \
}; f"

# Color specifications
[color]
    ui = always

[color "branch"]
    current = green bold
    local = green
    remote = yellow

[color "diff"]
    frag = magenta
    meta = yellow
    new = green
    old = red

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = "red bold 52"
    newNormal = "green bold"
    newHighlight = "green bold 22"

[color "status"]
    added = green reverse
    changed = yellow reverse
    untracked = red reverse

# Git mergetool
[merge]
    tool = opendiff

[core]
    editor = vim
    abbrev = 12
    attributesfile = ~/.gitattributes
    excludesfile = ~/.gitignore
    autocrlf = input
    mergeoptions = --no-edit
    ignorecase = false

[pretty]
    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"

[help]
    # Correct typos
    autocorrect = 1

[push]
    # Make `git push` automatically push relevant annotated tags when
    # pushing branches out
    followTags = true
    default = current

[include]
    # Use separate file for username/github token/etc.
    path = ~/.gitconfig.local

[filter "lfs"]
    clean = git lfs clean %f
    smudge = git lfs smudge %f
    required = true

[fetch]
    prune = true